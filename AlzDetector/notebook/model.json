{
	"name": "model",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "alzspark01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9b3fa765-c3c7-4194-a6dc-bbd6b6815b3b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/90cc145c-b084-4cc1-8094-58c0d8de0332/resourceGroups/alzdetector/providers/Microsoft.Synapse/workspaces/alzheimer/bigDataPools/alzspark01",
				"name": "alzspark01",
				"type": "Spark",
				"endpoint": "https://alzheimer.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/alzspark01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"STORAGE_ACCOUNT = \"alzdetectorstorage\"\r\n",
					"CONTAINER_NAME = \"alzheimer-anly\"\r\n",
					"STORAGE_KEY = \"\"\r\n",
					"\r\n",
					"spark = SparkSession.builder.getOrCreate()\r\n",
					"spark.conf.set(f\"fs.azure.account.key.{STORAGE_ACCOUNT}.blob.core.windows.net\", STORAGE_KEY)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, DoubleType, IntegerType\r\n",
					"\r\n",
					"TRAIN_COL_SIZE = 8233\r\n",
					"TEST_COL_SIZE = 2063\r\n",
					"\r\n",
					"cpg_site_field = [StructField(\"cpg_site\", StringType(), False)]\r\n",
					"train_samples = [StructField(f\"{i:05}\", DoubleType(), True) for i in range(1, TRAIN_COL_SIZE + 1)]\r\n",
					"test_samples = [StructField(f\"{i:05}\", DoubleType(), True) for i in range(TRAIN_COL_SIZE + 1, TRAIN_COL_SIZE + TEST_COL_SIZE + 1)]\r\n",
					"\r\n",
					"train_schema = StructType(cpg_site_field + train_samples)\r\n",
					"test_schema = StructType(cpg_site_field + test_samples)\r\n",
					"\r\n",
					"train_map_info = [StructField(\"row_num\", StringType(), False),\r\n",
					"                  StructField(\"sample_id\", StringType(), False),\r\n",
					"                  StructField(\"age\", IntegerType(), False), \r\n",
					"                  StructField(\"gender\", StringType(), False),\r\n",
					"                  StructField(\"sample_type\", StringType(), False),\r\n",
					"                  StructField(\"disease\", StringType(), False)]\r\n",
					"                  \r\n",
					"test_map_info = [StructField(\"row_num\", IntegerType(), False),\r\n",
					"                 StructField(\"sample_id\", StringType(), False),\r\n",
					"                 StructField(\"gender\", StringType(), False)]\r\n",
					"\r\n",
					"train_map_schema = StructType(train_map_info)\r\n",
					"test_map_schema = StructType(test_map_info)"
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"train_path = f\"wasbs://{CONTAINER_NAME}@{STORAGE_ACCOUNT}.blob.core.windows.net/data/train.csv\"\r\n",
					"train = spark.read.csv(train_path, schema=train_schema, header=True)\r\n",
					"\r\n",
					"train_map_path = f\"wasbs://{CONTAINER_NAME}@{STORAGE_ACCOUNT}.blob.core.windows.net/maps/trainmap.csv\"\r\n",
					"train_map = spark.read.csv(train_map_path, schema=train_map_schema, header=True)\r\n",
					"\r\n",
					"test_path = f\"wasbs://{CONTAINER_NAME}@{STORAGE_ACCOUNT}.blob.core.windows.net/data/test.csv\"\r\n",
					"test = spark.read.csv(train_map_path, schema=train_map_schema, header=True)\r\n",
					"\r\n",
					"test_map_path = f\"wasbs://{CONTAINER_NAME}@{STORAGE_ACCOUNT}.blob.core.windows.net/maps/testmap.csv\"\r\n",
					"test_map = spark.read.csv(test_map_path, schema=test_map_schema, header=True)"
				],
				"execution_count": 110
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col, format_string, monotonically_increasing_id\r\n",
					"\r\n",
					"train_map = train_map.withColumn(\"sample_id\", format_string(\"%05d\", monotonically_increasing_id()))\r\n",
					"train_map = train_map.drop(\"row_num\")\r\n",
					"\r\n",
					"test_map = test_map.withColumn(\"sample_id\", format_string(\"%05d\", TRAIN_COL_SIZE + 1 + monotonically_increasing_id()))\r\n",
					"test_map = test_map.drop(\"row_num\")"
				],
				"execution_count": 111
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.ml.feature import Imputer \r\n",
					"\r\n",
					"numeric_cols = train.columns[1:]\r\n",
					"\r\n",
					"imputer = Imputer(strategy='mean', inputCols=numeric_cols, outputCols=numeric_cols)\r\n",
					"model = imputer.fit(train)\r\n",
					"\r\n",
					"train = model.transform(train)"
				],
				"execution_count": 61
			}
		]
	}
}